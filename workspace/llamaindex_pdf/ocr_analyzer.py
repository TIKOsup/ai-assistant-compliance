# ocr_analyzer.py
import pymupdf4llm
import pymupdf
import pytesseract
from pdf2image import convert_from_path
import sys
import os
from datetime import datetime
from PIL import Image
import tempfile

def extract_text_with_ocr(pdf_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR –¥–ª—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print(f"üîç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(pdf_path)}")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üì∑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        images = convert_from_path(pdf_path, dpi=300)  # –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
        
        all_text = []
        
        for i, image in enumerate(images):
            print(f"üî§ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}/{len(images)}...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
            custom_config = r'--oem 3 --psm 6 -l rus+eng'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = pytesseract.image_to_string(image, config=custom_config)
            
            if text.strip():
                all_text.append(f"=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ===\n{text}")
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        combined_text = "\n\n".join(all_text)
        print(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return combined_text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
        return None

def smart_extract_text(pdf_path):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±, –ø–æ—Ç–æ–º OCR"""
    print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑: {os.path.basename(pdf_path)}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    try:
        text = pymupdf4llm.to_markdown(pdf_path)
        if len(text.strip()) > 100:  # –ï—Å–ª–∏ –∏–∑–≤–ª–µ–∫–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞
            print(f"‚úÖ –û–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
        else:
            print("‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º OCR...")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
        print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ OCR...")
    
    # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
    return extract_text_with_ocr(pdf_path)

def analyze_contract_with_ocr(pdf_path, regulations_path="./regulations"):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OCR"""
    print(f"üöÄ –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å OCR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    print(f"üìÅ –§–∞–π–ª: {pdf_path}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞
    contract_text = smart_extract_text(pdf_path)
    
    if not contract_text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text_file = f"extracted_text_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(text_file, 'w', encoding='utf-8') as f:
        f.write(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑: {pdf_path}\n")
        f.write("="*60 + "\n")
        f.write(contract_text)
    
    print(f"üíæ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {text_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    print(f"\nüìã –ü–†–ï–í–¨–Æ –ò–ó–í–õ–ï–ß–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê:")
    print("-" * 50)
    print(contract_text[:1000])
    print("..." if len(contract_text) > 1000 else "")
    print("-" * 50)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    print(f"\nüîç –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó:")
    
    keywords_sanctions = ['—Å–∞–Ω–∫—Ü–∏', '–∑–∞–ø—Ä–µ—Ç', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω', '–±–ª–æ–∫–∏—Ä']
    keywords_currency = ['–≤–∞–ª—é—Ç', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—Ä—É–±–ª', '–∫—É—Ä—Å']
    keywords_contract = ['–¥–æ–≥–æ–≤–æ—Ä', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–æ–≥–ª–∞—à–µ–Ω', '—Å—Ç–æ—Ä–æ–Ω']
    
    text_lower = contract_text.lower()
    
    found_sanctions = [kw for kw in keywords_sanctions if kw in text_lower]
    found_currency = [kw for kw in keywords_currency if kw in text_lower]
    found_contract = [kw for kw in keywords_contract if kw in text_lower]
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    print(f"  –°–∞–Ω–∫—Ü–∏–∏: {found_sanctions}")
    print(f"  –í–∞–ª—é—Ç–∞: {found_currency}")
    print(f"  –î–æ–≥–æ–≤–æ—Ä: {found_contract}")
    
    if found_contract:
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä")
    else:
        print("‚ö†Ô∏è –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —ç—Ç–æ –¥–æ–≥–æ–≤–æ—Ä")
    
    return contract_text

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python ocr_analyzer.py contract.pdf")
        sys.exit(1)
    
    pdf_file = sys.argv[1]
    analyze_contract_with_ocr(pdf_file)

