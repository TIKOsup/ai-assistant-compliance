# simple_analyzer.py
import pymupdf4llm
import sys
import os
import argparse
from datetime import datetime
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.llms.ollama import Ollama
import json

class ContractAnalyzer:
    def __init__(self, regulations_path="./regulations", model_name="llama3.1:8b"):
        self.regulations_path = regulations_path
        self.model_name = model_name
        self.regulations_index = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –∏ embeddings
        Settings.llm = Ollama(model=model_name, request_timeout=120.0)
        Settings.embed_model = HuggingFaceEmbedding(model_name="sentence-transformers/all-MiniLM-L6-v2")
        
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –º–æ–¥–µ–ª—å—é: {model_name}")
    
    def load_regulations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å"""
        if not os.path.exists(self.regulations_path):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.regulations_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"üìÅ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã:")
            print(f"   mkdir {self.regulations_path}")
            return False
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = []
        for file in os.listdir(self.regulations_path):
            if file.lower().endswith(('.pdf', '.docx', '.doc', '.txt')):
                files.append(file)
        
        if not files:
            print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ!")
            return False
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in files:
            print(f"   üìÑ {file}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            documents = SimpleDirectoryReader(self.regulations_path).load_data()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
            self.regulations_index = VectorStoreIndex.from_documents(documents)
            
            print("‚úÖ –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤: {str(e)}")
            return False
    
    def extract_text_from_pdf(self, pdf_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF"""
        if not os.path.exists(pdf_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
            return None
        
        print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑: {os.path.basename(pdf_path)}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é pymupdf4llm
            contract_text = pymupdf4llm.to_markdown(pdf_path)
            
            if not contract_text.strip():
                print("‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
                return None
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(contract_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
            return contract_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return None
    
    def analyze_contract(self, contract_text):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤"""
        if not self.regulations_index:
            print("‚ùå –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return None
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—é —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ú–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –ü–†–ò–ù–Ø–¢–¨ –∏–ª–∏ –Ω—É–∂–Ω–æ –û–¢–ö–ê–ó–ê–¢–¨
2. –£–∫–∞–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–£–Æ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—à–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç

–î–û–ì–û–í–û–† –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{contract_text[:4000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

–ö–†–ò–¢–ï–†–ò–ò –ü–†–û–í–ï–†–ö–ò:
- –°–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –°–®–ê, –ï–°, UK
- –í–∞–ª—é—Ç–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
- –õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–†–ï–®–ï–ù–ò–ï: [–ü–†–ò–ù–Ø–¢–¨/–û–¢–ö–ê–ó–ê–¢–¨]
–ü–†–ò–ß–ò–ù–ê: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞/—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞]
–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏]
"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
            query_engine = self.regulations_index.as_query_engine(
                similarity_top_k=5,
                response_mode="compact"
            )
            
            response = query_engine.query(analysis_prompt)
            return str(response)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return None
    
    def parse_analysis_result(self, analysis_text):
        """–ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        decision = "–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û"
        reason = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É"
        recommendations = ""
        
        lines = analysis_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if line.upper().startswith('–†–ï–®–ï–ù–ò–ï:'):
                decision = line.split(':', 1)[1].strip()
            elif line.upper().startswith('–ü–†–ò–ß–ò–ù–ê:'):
                reason = line.split(':', 1)[1].strip()
            elif line.upper().startswith('–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:'):
                recommendations = line.split(':', 1)[1].strip()
        
        return decision, reason, recommendations
    
    def save_analysis_log(self, filename, decision, reason, recommendations=""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "filename": filename,
            "decision": decision,
            "reason": reason,
            "recommendations": recommendations
        }
        
        log_file = "contract_analysis_log.json"
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                logs = json.load(f)
        else:
            logs = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        logs.append(log_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
        
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {log_file}")
    
    def analyze_pdf_contract(self, pdf_path, save_log=True):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ PDF –¥–æ–≥–æ–≤–æ—Ä–∞"""
        filename = os.path.basename(pdf_path)
        print(f"\n{'='*60}")
        print(f"üìã –ê–ù–ê–õ–ò–ó –î–û–ì–û–í–û–†–ê: {filename}")
        print(f"{'='*60}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
        contract_text = self.extract_text_from_pdf(pdf_path)
        if not contract_text:
            return None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
        print(f"\nüìÑ –ü–†–ï–í–¨–Æ –î–û–ì–û–í–û–†–ê (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
        print("-" * 50)
        print(contract_text[:500] + "..." if len(contract_text) > 500 else contract_text)
        print("-" * 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
        analysis_result = self.analyze_contract(contract_text)
        if not analysis_result:
            return None
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        decision, reason, recommendations = self.parse_analysis_result(analysis_result)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 50)
        
        # –†–µ—à–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if "–ü–†–ò–ù–Ø–¢–¨" in decision.upper():
            print(f"‚úÖ –†–ï–®–ï–ù–ò–ï: {decision}")
        else:
            print(f"‚ùå –†–ï–®–ï–ù–ò–ï: {decision}")
        
        print(f"\nüìù –ü–†–ò–ß–ò–ù–ê:")
        print(reason)
        
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(recommendations)
        
        print(f"\nüìã –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        print("-" * 30)
        print(analysis_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        if save_log:
            self.save_analysis_log(filename, decision, reason, recommendations)
        
        return {
            "decision": decision,
            "reason": reason, 
            "recommendations": recommendations,
            "full_analysis": analysis_result
        }

def main():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä PDF –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
    parser.add_argument("pdf_file", help="–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –¥–æ–≥–æ–≤–æ—Ä–∞")
    parser.add_argument("--model", default="llama3.1:8b", help="–ú–æ–¥–µ–ª—å Ollama (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: llama3.1:8b)")
    parser.add_argument("--regulations", default="./regulations", help="–ü–∞–ø–∫–∞ —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏")
    parser.add_argument("--no-log", action="store_true", help="–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞")
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
    print(f"üìÅ –ü–∞–ø–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤: {args.regulations}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {args.model}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ContractAnalyzer(
        regulations_path=args.regulations,
        model_name=args.model
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
    if not analyzer.load_regulations():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
    result = analyzer.analyze_pdf_contract(
        args.pdf_file, 
        save_log=not args.no_log
    )
    
    if result:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()