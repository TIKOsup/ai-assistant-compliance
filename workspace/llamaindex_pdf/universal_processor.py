# universal_processor.py
import os
import sys
import pandas as pd
from docx import Document as DocxDocument
import pymupdf4llm
import pytesseract
from pdf2image import convert_from_path
import xml.etree.ElementTree as ET
from datetime import datetime
import warnings
from PIL import Image

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore")
Image.MAX_IMAGE_PIXELS = None

class UniversalDocumentProcessor:
    def __init__(self, input_dir="./regulations", output_dir="./processed_regulations"):
        self.input_dir = input_dir
        self.output_dir = output_dir
        self.processed_files = {}
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(output_dir, exist_ok=True)
        
    def extract_text_from_pdf(self, pdf_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å OCR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {os.path.basename(pdf_path)}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            text = pymupdf4llm.to_markdown(pdf_path)
            if len(text.strip()) > 100:
                print(f"‚úÖ –û–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text
            else:
                print("‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR...")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ OCR...")
        
        # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
        try:
            print("üì∑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            images = convert_from_path(pdf_path, dpi=300)
            
            all_text = []
            for i, image in enumerate(images):
                print(f"üî§ OCR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}/{len(images)}...")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
                custom_config = r'--oem 3 --psm 6 -l rus+eng'
                text = pytesseract.image_to_string(image, config=custom_config)
                
                if text.strip():
                    all_text.append(f"=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ===\n{text}")
            
            combined_text = "\n\n".join(all_text)
            print(f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return combined_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            return None

    def extract_text_from_docx(self, docx_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–æ–≤"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX: {os.path.basename(docx_path)}")
        
        try:
            doc = DocxDocument(docx_path)
            text = []
            
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text.append(paragraph.text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_text.append(cell.text.strip())
                    if row_text:
                        text.append(" | ".join(row_text))
            
            combined_text = "\n".join(text)
            print(f"‚úÖ DOCX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return combined_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DOCX: {e}")
            return None

    def extract_text_from_doc(self, doc_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å—Ç–∞—Ä—ã—Ö DOC —Ñ–∞–π–ª–æ–≤"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DOC: {os.path.basename(doc_path)}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å python-docx (–∏–Ω–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å .doc)
            doc = DocxDocument(doc_path)
            text = []
            
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text.append(paragraph.text)
            
            combined_text = "\n".join(text)
            if len(combined_text) > 50:
                print(f"‚úÖ DOC –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return combined_text
            else:
                print("‚ö†Ô∏è –ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOC —Ñ–∞–π–ª–∞")
                return f"[DOC —Ñ–∞–π–ª {os.path.basename(doc_path)} —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏]"
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å DOC —Ñ–∞–π–ª: {e}")
            return f"[DOC —Ñ–∞–π–ª {os.path.basename(doc_path)} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å - {str(e)}]"

    def extract_text_from_xlsx(self, xlsx_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX: {os.path.basename(xlsx_path)}")
        
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
            xlsx_file = pd.ExcelFile(xlsx_path)
            all_text = []
            
            for sheet_name in xlsx_file.sheet_names:
                print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet_name}")
                df = pd.read_excel(xlsx_path, sheet_name=sheet_name)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
                sheet_text = f"=== –õ–ò–°–¢: {sheet_name} ===\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if not df.empty:
                    headers = " | ".join([str(col) for col in df.columns])
                    sheet_text += f"–ó–ê–ì–û–õ–û–í–ö–ò: {headers}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫)
                    for idx, row in df.head(1000).iterrows():
                        row_text = " | ".join([str(val) if pd.notna(val) else "" for val in row])
                        if row_text.strip():
                            sheet_text += f"{row_text}\n"
                
                all_text.append(sheet_text)
            
            combined_text = "\n\n".join(all_text)
            print(f"‚úÖ XLSX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return combined_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ XLSX: {e}")
            return None

    def extract_text_from_xml(self, xml_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML —Ñ–∞–π–ª–æ–≤"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ XML: {os.path.basename(xml_path)}")
        
        try:
            tree = ET.parse(xml_path)
            root = tree.getroot()
            
            def extract_xml_text(element, level=0):
                text = []
                indent = "  " * level
                
                if element.text and element.text.strip():
                    text.append(f"{indent}{element.tag}: {element.text.strip()}")
                elif element.tag:
                    text.append(f"{indent}{element.tag}:")
                
                for child in element:
                    text.extend(extract_xml_text(child, level + 1))
                
                return text
            
            all_text = extract_xml_text(root)
            combined_text = "\n".join(all_text)
            print(f"‚úÖ XML –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return combined_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ XML: {e}")
            return None

    def extract_text_from_pptx(self, pptx_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PowerPoint —Ñ–∞–π–ª–æ–≤"""
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PPTX: {os.path.basename(pptx_path)}")
        
        try:
            from pptx import Presentation
            
            prs = Presentation(pptx_path)
            text = []
            
            for i, slide in enumerate(prs.slides):
                slide_text = f"=== –°–õ–ê–ô–î {i+1} ===\n"
                
                for shape in slide.shapes:
                    if hasattr(shape, "text") and shape.text:
                        slide_text += f"{shape.text}\n"
                
                if slide_text.strip() != f"=== –°–õ–ê–ô–î {i+1} ===":
                    text.append(slide_text)
            
            combined_text = "\n\n".join(text)
            print(f"‚úÖ PPTX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return combined_text
            
        except ImportError:
            print("‚ö†Ô∏è python-pptx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º PPTX —Ñ–∞–π–ª")
            return f"[PPTX —Ñ–∞–π–ª {os.path.basename(pptx_path)} —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ python-pptx]"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PPTX: {e}")
            return None

    def process_file(self, file_path):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        file_ext = os.path.splitext(file_path)[1].lower()
        
        if file_ext == '.pdf':
            return self.extract_text_from_pdf(file_path)
        elif file_ext == '.docx':
            return self.extract_text_from_docx(file_path)
        elif file_ext == '.doc':
            return self.extract_text_from_doc(file_path)
        elif file_ext in ['.xlsx', '.xls']:
            return self.extract_text_from_xlsx(file_path)
        # elif file_ext == '.xml':
        #     return self.extract_text_from_xml(file_path)
        elif file_ext in ['.pptx', '.ppt']:
            return self.extract_text_from_pptx(file_path)
        else:
            print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext}")
            return f"[–§–∞–π–ª {os.path.basename(file_path)} - –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç {file_ext}]"

    def process_all_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
        if not os.path.exists(self.input_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        files = [f for f in os.listdir(self.input_dir) 
                if os.path.isfile(os.path.join(self.input_dir, f))]
        
        if not files:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {self.input_dir}")
            return False
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤...")
        print("=" * 60)
        
        for file in files:
            file_path = os.path.join(self.input_dir, file)
            print(f"\nüìÅ –§–∞–π–ª: {file}")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                text = self.process_file(file_path)
                
                if text:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    output_file = os.path.join(self.output_dir, f"{file}.txt")
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write(f"–ò–°–¢–û–ß–ù–ò–ö: {file}\n")
                        f.write(f"–î–ê–¢–ê –û–ë–†–ê–ë–û–¢–ö–ò: {datetime.now().isoformat()}\n")
                        f.write(f"–†–ê–ó–ú–ï–† –¢–ï–ö–°–¢–ê: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                        f.write("=" * 60 + "\n\n")
                        f.write(text)
                    
                    self.processed_files[file] = {
                        'status': 'success',
                        'text_length': len(text),
                        'output_file': output_file
                    }
                    
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
                else:
                    self.processed_files[file] = {
                        'status': 'failed',
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç'
                    }
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
                    
            except Exception as e:
                self.processed_files[file] = {
                    'status': 'error',
                    'error': str(e)
                }
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_processing_report()
        
        return True

    def create_processing_report(self):
        """–°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        report_file = os.path.join(self.output_dir, "processing_report.txt")
        
        successful = sum(1 for f in self.processed_files.values() if f['status'] == 'success')
        failed = len(self.processed_files) - successful
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –û –û–ë–†–ê–ë–û–¢–ö–ï –î–û–ö–£–ú–ï–ù–¢–û–í\n")
            f.write("=" * 40 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().isoformat()}\n")
            f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(self.processed_files)}\n")
            f.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}\n")
            f.write(f"–û—à–∏–±–∫–∏: {failed}\n\n")
            
            f.write("–î–ï–¢–ê–õ–ò –û–ë–†–ê–ë–û–¢–ö–ò:\n")
            f.write("-" * 40 + "\n")
            
            for filename, info in self.processed_files.items():
                f.write(f"\n–§–∞–π–ª: {filename}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: {info['status']}\n")
                
                if info['status'] == 'success':
                    f.write(f"–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {info['text_length']} —Å–∏–º–≤–æ–ª–æ–≤\n")
                    f.write(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {info['output_file']}\n")
                else:
                    f.write(f"–û—à–∏–±–∫–∞: {info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n")
        
        print(f"\nüìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

def main():
    processor = UniversalDocumentProcessor()
    
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    if os.path.exists(processor.input_dir):
        files = os.listdir(processor.input_dir)
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ {processor.input_dir}: {len(files)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        file_types = {}
        for file in files:
            ext = os.path.splitext(file)[1].lower()
            file_types[ext] = file_types.get(ext, 0) + 1
        
        print("üìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
        for ext, count in file_types.items():
            print(f"  {ext}: {count}")
        
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        processor.process_all_files()
        
    else:
        print(f"‚ùå –ü–∞–ø–∫–∞ {processor.input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()